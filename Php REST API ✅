🐖mappa:
-htdocs mappa:
    -api mappa:
        >index.php (1.)
        >databaseconnect.php (2.)
        -frontend mappa: 
            >index.html (3.) http://localhost/api/index.html?levesek
            >levesek.css (4.)
            >levesek.js (5.)
    

🐖1.
index.php:

<?php
header('Content-Type: application/json; charset=utf-8');
header('Acces-Control-Allow-Origin: *'); // Beállítja a válasz Access-Control-Allow-Origin fejlécét, hogy engedélyezze a CORS-t, és minden eredeti hozzáférést elfogadjon.

require_once 'databaseconnect.php'; // Beleértve a 'databaseconnect.php' fájlt.

$params = explode('/', $_SERVER['QUERY_STRING']); // A QUERY_STRING felhasználásával kinyeri a paramétereket és elválasztja őket a perjel (/) alapján.

switch ($params[0]) { // A kapott paraméterek alapján kapcsol át.

    case "levesek": // Ha az első paraméter "levesek".
        switch ($_SERVER["REQUEST_METHOD"]) { // HTTP kérés típusának kezelése.
            case 'GET': // Ha a kérés típusa GET.
                $request = $conn->query("SELECT * FROM levesek"); // Lekéri az összes sort a 'levesek' táblából.
                $levesek = $request->fetch_all(MYSQLI_ASSOC); // Az összes sort asszociatív tömbben tárolja.
                http_response_code("201"); // HTTP válasz kód beállítása 201-re (Created).
                echo json_encode($levesek); // Visszaadja az összes levest JSON formátumban.
                break;
            case 'POST': // Ha a kérés típusa POST.
                $insert = ""; // Nincs specifikus művelet beállítva.
            default:
                break;
        }
        break;

    case "fogyasztas": // Ha az első paraméter "fogyasztas".
        switch ($_SERVER["REQUEST_METHOD"]) { // HTTP kérés típusának kezelése.
            case "POST": // Ha a kérés típusa POST.
                // Létrehozza az INSERT SQL parancsot az adatokkal.
                $sql = "INSERT INTO fogyasztas (adag, datum, levesekkod) VALUES (" . $_HOST['adag'] . ", " . $_HOST['datum'] . ", " . $_HOST['levesekkod'] . ")";
                // Végrehajtja az SQL parancsot és ellenőrzi a sikert.
                if ($conn->query($sql)) {
                    http_response_code("201"); // Ha sikeres, beállítja a HTTP válasz kódot 201-re (Created).
                } else {
                    http_response_code("401"); // Ha nem sikerült, beállítja a HTTP válasz kódot 401-re (Unauthorized).
                }
                break;
            default:
                break;
        }
        break;
    default:
        http_response_code("401"); // Ha nincs megfelelő paraméter, beállítja a HTTP válasz kódot 401-re (Unauthorized).
        break;
}
?>


🐖2.
databaseconnect.php: ✅FIX

<?php
$conn = new mysqli("localhost", "root", "", "etelek"); // Létrehozza a kapcsolatot a MySQL adatbázissal: helyi szerver, root felhasználó, üres jelszó, "etelek" adatbázis.
if ($conn->errno) { // Ellenőrzi, hogy van-e hiba a kapcsolat létrehozásakor.
    echo 'Adatbázis hiba'; // Ha hiba van, kiírja az "Adatbázis hiba" üzenetet.
    die(); // Megszakítja a szkript futását.
}
// $conn -> set_charset('utf-8'); // A karakterkódolás beállítása UTF-8-ra. Jelenleg kikommentezve van, így nincs hatással a kódra.
?>

🐖🐖🐖🐖🐖🐖🐖🐖🐖🐖🐖🐖🐖🐖🐖🐖🐖🐖🐖🐖🐖

(((🐖🐖🐖Melléklek... nem értettem
VS Code:
negyzetek: thunder client
new request
POST: http://localhost/api/index.php?fogyasztas
body: valami
🐖🐖🐖)))

🐖3.0
frontend mappa tartalma következik:

ezeket használd:
https://cdnjs.com/libraries/bootstrap
a bunde.min.js ÉS bootstrap.min.css a head-be!!!

🐖3.1
index.html:

<!DOCTYPE html>
<html lang="hu">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.3/css/bootstrap.min.css" integrity="sha512-jnSuA4Ss2PkkikSOLtYs8BlYIeeIK1h99ty4YfvRPAlzr377vr3CXDb7sb7eEEBYjDtcYj+AjBH3FLv5uSJuXg==" crossorigin="anonymous" referrerpolicy="no-referrer" />
    <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.3/js/bootstrap.bundle.min.js" integrity="sha512-7Pi/otdlbbCR+LnW+F7PwFcSDJOuUJB3OxtEHbg4vSMvzvJjde4Po1v4BR9Gdc9aXNUNFVUY+SK51wWT8WF0Gg==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
    <link rel="stylesheet" href="levesek.css">
    <script src="levesek.js"></script>
    <title>Beregszászi fitnesz</title>
</head>
<body>
    <div class = "container">
        <h1>Beregszászi fitnesz</h1>
    </div>
    <div id="levesek" class="row">
        <div class="card">
            <div class="card-body">
                <h5 class="card-title">'megnevezes'</h5>
                <p class="card-text">kalória: 'kaloria'</p>
                <p class="card-text">fehérje: 'feherje'</p>
                <p class="card-text">zsír: 'zsir'</p>
            </div>
        </div>
    </div>
</body>
</html>

🐖4.
levesek.js:

const apiurl = "http://localhost/api/index.php?levesek"; // A hívni kívánt API végpont URL-je.

document.addEventListener("DOMContentLoaded", function () { // Az oldal tartalmának betöltése után futtatott kód.
    async function getLevesek() { // Az összes levest lekérdező függvény.
        const response = await fetch(apiurl); // Az API végpontra történő HTTP GET kérés elküldése.
        const data = await response.json(); // A válasz JSON formátumban való olvasása.
        console.log(data); // A lekért adatok kiírása a böngésző konzoljára.
        showLevesek(data); // A lekért adatok megjelenítése az oldalon.
    }

    function showLevesek(data) { // Az összes leves megjelenítésére szolgáló függvény.
        let levesekHTML = ""; // A levesek HTML kódjának tárolására szolgáló változó.
        for (let leves of data) { // Minden levesen végigmegyünk.
            // Az adott leves adatainak beillesztése az előre definiált HTML sablonba.
            levesekHTML += `<div class="card">
                <div class="card-body">
                    <h5 class="card-title">${leves.megnevezes}</h5>
                    <p class="card-text">Kalória: ${leves.kaloria}</p>
                    <p class="card-text">Fehérje: ${leves.feherje}</p>
                    <p class="card-text">Zsír: ${leves.zsir}</p>
                </div>
            </div>`;
        }
        document.getElementById('levesek').innerHTML = levesekHTML; // Az előre definiált helyre (levesek id-jú elem) beilleszti a levesek HTML kódját.
    }

    getLevesek(); // Az összes leves lekérése a dokumentum betöltése után.
});


🐖5.
levesek.css

.card{
    margin: 10px;
    padding: 10px;
    border: 3px solid rgb(0, 38, 255);
    background-color: rgba(21, 255, 0, 0.445);
    box-shadow: 0 4px 10px rgba(0, 94, 13, 0.829);
}


🐖🐖🐖🐖🐖🐖🐖🐖🐖🐖🐖🐖🐖🐖🐖🐖🐖🐖🐖🐖🐖🐖🐖🐖🐖🐖🐖🐖🐖🐖🐖🐖🐖🐖🐖🐖🐖🐖🐖🐖🐖🐖🐖🐖🐖🐖🐖

🐖mappa:
-htdocs mappa:
    -api mappa:
        >index.php (1.)
        >databaseconnect.php (2.)
        -frontend mappa: 
            >index.php (3.) http://localhost/api/index.php?dolgozok
            >levesek.css (4.)
            >levesek.js (5.)

thunder client 
new request > POST: localhost/api/index.php?dolgozok
body > FORM

nev - Béla
neme - férfi
reszleg - asztalos
belepesev - 2021
ber - 50000
és SEND
