üîµüîµüîµ5. adat m√≥dos√≠t√°sa az sql-benüîµüîµüîµ

üîµGRID:
     <Grid>
        <Button x:Name="atirat" Content="√Åt√≠r√°s" HorizontalAlignment="Center" Margin="0,353,0,0" VerticalAlignment="Top" FontSize="20" Click="Button_Click_1"/>
        <TextBox x:Name="nevbox" HorizontalAlignment="Left" Margin="167,138,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="231" FontSize="20"/>
        <TextBox x:Name="nemebox" HorizontalAlignment="Left" Margin="167,175,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="231" FontSize="20"/>
        <TextBox x:Name="reszlegbox" HorizontalAlignment="Left" Margin="167,211,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="231" FontSize="20"/>
        <TextBox x:Name="belepesevbox" HorizontalAlignment="Left" Margin="167,249,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="231" FontSize="20"/>
        <TextBlock HorizontalAlignment="Left" Margin="31,50,0,0" TextWrapping="Wrap" VerticalAlignment="Top" FontSize="24"><Run Language="hu-hu" Text="Adatok m√≥dos√≠t√°sa"/></TextBlock>
        <TextBlock HorizontalAlignment="Left" Margin="31,138,0,0" TextWrapping="Wrap" VerticalAlignment="Top" FontSize="20"><Run Language="hu-hu" Text="N√©v:"/></TextBlock>
        <TextBlock HorizontalAlignment="Left" Margin="31,175,0,0" TextWrapping="Wrap" VerticalAlignment="Top" FontSize="20"><Run Language="hu-hu" Text="Neme: f√©rfi/n≈ë"/></TextBlock>
        <TextBlock HorizontalAlignment="Left" Margin="31,213,0,0" TextWrapping="Wrap" VerticalAlignment="Top" FontSize="20"><Run Language="hu-hu" Text="R√©szleg:"/></TextBlock>
        <TextBlock HorizontalAlignment="Left" Margin="31,249,0,0" TextWrapping="Wrap" VerticalAlignment="Top" FontSize="20"><Run Language="hu-hu" Text="Bel√©p√©s √©v:"/></TextBlock>
        <ComboBox x:Name="listacombobox" HorizontalAlignment="Left" Margin="269,54,0,0" VerticalAlignment="Top" Width="120" SelectionChanged="lista_SelectionChanged"/>
        <TextBox x:Name="berbox" HorizontalAlignment="Left" Margin="167,289,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="231" FontSize="20"/>
        <TextBlock HorizontalAlignment="Left" Margin="31,289,0,0" TextWrapping="Wrap" VerticalAlignment="Top" FontSize="20"><Run Language="hu-hu" Text="B√©r:"/></TextBlock>
        <TextBlock HorizontalAlignment="Left" Margin="286,20,0,0" TextWrapping="Wrap" VerticalAlignment="Top" FontSize="14"><Run Text="V√°las"/><Run Language="hu-hu" Text="s"/><Run Text="z nevet!"/></TextBlock>
    </Grid>

üîµ1x sql hivatkoz√°s:
using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;
using MySql.Data.MySqlClient;

namespace vizsgaraWPFmodositas
{
    /// <summary>
    /// Interaction logic for MainWindow.xaml
    /// </summary>
    public partial class MainWindow : Window
    {
        public MySqlConnection connection;
        public MainWindow()
        {
            InitializeComponent();
            InitializeDbConn(); //1
            FillComboBox(); //2
            ValidateInputs(); //3
        }
        private void InitializeDbConn() //1
        {
            string connectionString = "Server=localhost; Database=dolgozok; Uid=root; Pwd=;";
            connection = new MySqlConnection(connectionString);
        }

        private void FillComboBox() //2
        {
            try
            {
                connection.Open();
                string query = "SELECT nev FROM dolgozok";
                using (MySqlCommand command = new MySqlCommand(query, connection))
                {
                    using (MySqlDataReader reader = command.ExecuteReader())
                    {
                        while (reader.Read())
                        {
                            listacombobox.Items.Add(reader["nev"].ToString()); //micsoda jelenjen meg a comboboxba
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show("Hiba t√∂rt√©nt az adatb√°zis kapcsolat sor√°n: " + ex.Message);
            }
            finally
            {
                connection.Close();
            }
        }

        private void Button_Click_1(object sender, RoutedEventArgs e)
        {
            if (listacombobox.SelectedItem == null)
            {
                MessageBox.Show("Nincs n√©v kiv√°lasztva.");
                return;
            }

            try
            {
                connection.Open();
                string query = "UPDATE dolgozok SET ";
                var updateFields = new List<string>();

                MySqlCommand command = new MySqlCommand(); // Initialize MySqlCommand
                command.Connection = connection;

                if (!string.IsNullOrWhiteSpace(nevbox.Text)) //melyik box melyik t√°bl√°ba mentse az adatokat
                {
                    updateFields.Add("nev = @nev");
                    command.Parameters.AddWithValue("@nev", nevbox.Text);
                }

                if (!string.IsNullOrWhiteSpace(nemebox.Text))
                {
                    updateFields.Add("nem = @nem");
                    command.Parameters.AddWithValue("@nem", nemebox.Text);
                }

                if (!string.IsNullOrWhiteSpace(reszlegbox.Text))
                {
                    updateFields.Add("reszleg = @reszleg");
                    command.Parameters.AddWithValue("@reszleg", reszlegbox.Text);
                }

                if (!string.IsNullOrWhiteSpace(belepesevbox.Text))
                {
                    updateFields.Add("belepesev = @belepesev");
                    command.Parameters.AddWithValue("@belepesev", belepesevbox.Text);
                }

                if (!string.IsNullOrWhiteSpace(berbox.Text))
                {
                    updateFields.Add("ber = @ber");
                    command.Parameters.AddWithValue("@ber", berbox.Text);
                }

                if (updateFields.Count > 0)
                {
                    query += string.Join(", ", updateFields) + " WHERE nev = @selectedName";
                    command.Parameters.AddWithValue("@selectedName", listacombobox.SelectedItem.ToString());

                    command.CommandText = query;

                    int rowsAffected = command.ExecuteNonQuery();
                    MessageBox.Show(rowsAffected > 0 ? "Adat(ok) sikeresen m√≥dos√≠tva." : "Nem siker√ºlt m√≥dos√≠tani az adatokat.");
                }
                else
                {
                    MessageBox.Show("Nincs m√≥dos√≠that√≥ adat.");
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show("Hiba t√∂rt√©nt az adatok m√≥dos√≠t√°sa sor√°n: " + ex.Message);
            }
            finally
            {
                connection.Close();
            }
        }


        private bool ValidateInputs() //ellen≈ërz√©s, hogy minden bet≈± vagy sz√°m
        {
            // N√©v ellen≈ërz√©se
            if (!string.IsNullOrWhiteSpace(nevbox.Text))
            {
                foreach (char c in nevbox.Text)
                {
                    if (!char.IsLetter(c))
                    {
                        MessageBox.Show("A n√©v csak bet≈±ket tartalmazhat.");
                        return false;
                    }
                }
            }

            // Neme ellen≈ërz√©se
            if (!string.IsNullOrWhiteSpace(nemebox.Text))
            {
                if (nemebox.Text.ToLower() != "f√©rfi" && nemebox.Text.ToLower() != "n≈ë")
                {
                    MessageBox.Show("Nincs megfelel≈ë neme megadva (f√©rfi/n≈ë).");
                    return false;
                }
            }

            // R√©szleg ellen≈ërz√©se
            if (!string.IsNullOrWhiteSpace(reszlegbox.Text))
            {
                foreach (char c in reszlegbox.Text)
                {
                    if (!char.IsLetter(c))
                    {
                        MessageBox.Show("A r√©szleg csak bet≈±ket tartalmazhat.");
                        return false;
                    }
                }
            }

            // Bel√©p√©s √©v√©nek ellen≈ërz√©se
            if (!string.IsNullOrWhiteSpace(belepesevbox.Text))
            {
                foreach (char c in belepesevbox.Text)
                {
                    if (!char.IsDigit(c))
                    {
                        MessageBox.Show("A bel√©p√©s √©v√©nek csak sz√°mokat tartalmazhat.");
                        return false;
                    }
                }
            }

            // B√©r ellen≈ërz√©se
            if (!string.IsNullOrWhiteSpace(berbox.Text))
            {
                foreach (char c in berbox.Text)
                {
                    if (!char.IsDigit(c))
                    {
                        MessageBox.Show("A b√©r csak sz√°mokat tartalmazhat.");
                        return false;
                    }
                }
            }

            // Ha minden megfelel≈ë, t√©rj vissza true √©rt√©kkel
            return true;
        }


        private void lista_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {

        }
    }
}

üîµüîµüîµüîµüîµüîµüîµüîµüîµüîµüîµüîµ
